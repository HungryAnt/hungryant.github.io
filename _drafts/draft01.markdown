# 个人编程感悟


代码量

同行有说过这样一句话

> 同样是工作十年，有些人不断成长，积累十年的经验，有些人



控制代码量





- 始终保持程序清晰简介，易于修改

	代码易于修改，自然也就易于扩展


## 企图提升扩展性，定义不必要的interface

### 现象

举例说明

- 使用Spring依赖注入，定义service时，先定义interface，再对应定义一个实现类

- 编写一个特定格式数据生成类，XxxGenerator，补充上一个interface，总是考虑到万一后面其他人也会定义类似的Generator

### 合理解决方案

实际上这些场景没有定义interface的必要，在你确定会存在多个实现时且需要使用到多态时，再定义interface不晚。否则，保持代码简单即可，何必多维护一个文件呢？


	



