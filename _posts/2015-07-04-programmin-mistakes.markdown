---
layout: post
title:  "不吐不快-几点编程误区说明"
date:   2015-07-04 02:07:12
categories: experience
---


## 定义不必要的interface

### 现象

举例说明

- 使用Spring依赖注入，定义service时，先定义interface，再对应定义一个实现类

- 编写一个特定格式数据生成类，XxxGenerator，补充上一个interface，总是考虑到万一后面其他人也会定义类似的Generator

### 合理解决方案

实际上这些场景没有定义interface的必要，在你确定会存在多个实现时且需要使用到多态时，再定义interface不晚。否则，保持代码简单即可，何必多维护一个文件呢？


## 为数据库预留备用字段

详见这篇文章 [程序员应知——数据库设计的两个误区](http://www.51testing.com/html/94/n-246394.html)
(此文还介绍了另一个数据库操作的弊端：对数据记录id进行编码，赞作者的分享)

截取文章重点，说明如下

预留备用字段存在如下几个问题

- 增加大量备用字段，必定会浪费很多空间
- 用不了多久，就没有人能够说清楚到底哪个字段代表的是什么意义了
- 增加了这些备用字段就真的会够用吗？

### 合理解决方案

- 如果数量很少，而且信息的性质与原表密切相关，那么就可以直接在原表上增加字段，并将相关的数据更新进去
- 如果数量较大，或者并非是原表对象至关重要的属性，那么就可以新增一个表，然后通过键值连接起来


## 依靠冗余，对现有实现进行扩展

### 现象

总是担心新的逻辑不能影响到现有逻辑，定义新的API，甚至copy核心业务逻辑代码形成新的方法

所谓完全不遵守DRY原则，恕我直言，这是在对项目搞小破坏

### 合理解决方案

- 大胆修改现有代码
	
	放心大胆修改现有代码，有单测保证着呢（这也体现单测的重要性，恕我直言，没有单测的项目只是一堆垃圾）

	自测与回归测试也同样重要，不可省略

- 目光长远
	
	短期不需要做测试回归，但长期会维护多分类似的代码

	颇有责任心的同事，未来重构时，会面临更大的压力，回归测试需要更多，很可能发誓要撕碎你

